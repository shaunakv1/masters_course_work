HW3. Due by 11:59PM on Friday June 25

What are some of the principles and patterns which are fundamental
in Rails? Mention each of them and state their benefits. It is perfectly
OK to refer to articles and other sources on the web. However, do list
them as references.

Answer: 

Principles fundamental to Rails:
	a. MVC
		Benefits:
			1. Clean Separation of code/files according to responsibility. This results in to faster development cycles and easier maintenance.
			2. Aids Convention over Configuration as everything is where it should be
			3. De-Couples the different layers namely UI, Business Logic, and DB interactions and allows separate development of each 
			4. MVC is generated by rails automatically using Scaffolding, which generates purpose specific folders for users
			5. This also makes use and Implementation of Active Records easier
	
	b. Convention over Configuration (CoC)
		Benefits:
			1. Aids RAD (Rapid Application Development)
			2. Allows programmers to quickly get the app up and running rather than struggling with the complex configurations
			3. Automatically promoted Uniformity in code writing and makes code easy to understand to new people starting work on an existing project
			4. Makes life simpler entry level developers who don’t have to learn list 10 places to change do add a module, but just follow simple conventions
			5. Promotes a kind development where you increase complexity only when you need it. If you want to do a simple task, process should be simple. To do something more complex, add just the required complexity
			6. It’s probably the single most important factor that makes heavy use of Meta Programming, Code Synthesis and Code generation possible for Ruby and Rails 
			7. Promotes DRY, by keeping giving one point of origin/change to control functionalities.
			
	c. DRY
		Benefits:
			1. DRY ensures just one place to change if a change is required. If the same code is repeated at multiple places, and need arises of changing it, programmer has to change in all different places, leaving scope of error.
			2. Makes Debugging easier, as programmer knows the one place where the functionality is coded
			3. DRY being fundamental to rails, makes rails a simple to understand, promotes CoC.
			4. DRY is fundamental for Rapid Application Development (RAD) practice promoted by Rails.
			5. Fundamental to Active Records. It makes Synthesis of CRUD methods possible.
			6. Many simple tasks like displaying validation error messages get trivial and simple because of synthesized generic methods.
			
	There are some other principles which are fundamental to Ruby and Ruby on rails which are not classical "Design Principles" but principles anyways!
	And for that matter pretty important ones
	
	d. Use Standard tools/plugins/code where ever possible
		Benefits:
			1. There is large community of ruby developers who write high quality, fully tested code. 
			2. Its preferable over custom written code, as code we write may be prone to errors/design flaws. And any ways why write, something when better is available
			3. Developers can spend more time on writing and testing Business Logic than dealing with trivial code modules. 	
		
	e. Test Everything that you Write / Continuous Unit Testing and Continuous Integration:
		Benefits:
			1. Provides Excellent safety net against side effect breakages due to  code changes.
			2. Unit Testing ensures a healthy design and results in cleaner code.
			3. Automated test suites in rails application ensure that code is reliable and less uncertain.
			4. Continuous running of tests lets developer know immediately about bugs when they are still simple to solve, than later wasting loads of time in debugging
	
	f. Automate Tasks:
		Benefits:
			1. Ruby and RoR comes with loads of scripts and generators which do lots of laborious tasks for you. So why waste time in doing them manually
			2. Rake is a extremely powerful tool which can be used by developers to automate lots of repetitive and trivial tasks and Improve their productivity!
	
	g.  Keep Code simple and readable:
		 Benefits of this principle are obvious. Makes it easy for new developers to adapt the code, Makes debugging easy, and important of all
		 Makes it easier for the programmer who wrote it himself but looking at it after 6 months.

			
			
			
--------------------------------------------------------------------------------------------------------------------------------------------------------			
			
	
	Patterns fundamental to Rails
	
	a. Template Pattern
		Template Pattern is used widely in rails. The rendering of views benefits from this pattern. The features like layouts, where user can define 
		headers and footers for example, or Partials, which allow user to suck in web pages are all examples of template pattern being used. MVC in
		Rails too seems to be implemented by template pattern. 
		This is evident from the way the views are automatically rendered after the action in an controller.
		Template pattern is also quite evident in Ruby itself around which Rails is built. The closures along with use of "Yield" smells strongly of 
		template pattern.
		
	b. Prototype Pattern
		Benifits:
		1. RoR uses Prototype pattern to show pre filled forms to users. RoR makes use of the Prototype objects created in actions to pre fill some
		   of the fields so user does not have to reenter same data again and again. 
		
	c. Active Record Pattern (Object Relational Mapping Pattern)
		Benefits:
		1. Gives users CRUD methods without writing any code
		2. Benefits the scaffold feature Ruby on Rails. Based on the models synthesized by Active Records Complete MCV is generated automatically around it
		3. Enables rapid prototyping for developers.
		4. One of the most important benefits of this pattern to RoR is ability to be transparent to which DB is being used. Active Record takes of 
		    Changes in the Databases without effecting the application code at all.
		5. The developers on ROR now dont have to deal with SQL at all. And are always in their comfort zones of 'Objects'.

	
References
	1. Active Record Pattern: 
		http://www.scribd.com/doc/12353499/Ruby-on-Rails-A-Simple-Decision
		http://en.wikipedia.org/wiki/Active_record_pattern
	
	2. Tenets of Ruby on Rails	
	http://wiki.rubyonrails.org/getting-started/overview/tenets
	
	3. Principles of Rails Development
	http://www.inter-sections.net/2007/10/25/principles-of-rails-development

		
